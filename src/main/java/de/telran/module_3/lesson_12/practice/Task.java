package de.telran.module_3.lesson_12.practice;

//3**) У нас есть профессия в строительстве - чернорабочий. Он может выполнять любые низкоквалифицированные
//работы на стройке. На каждый день ему дается список работ, которые он должен выполнить, но не факт,
//что в течении рабочего времени его задание может измениться.
//Напишите программу рабочего дня профессии, которая позволяет динамический давать ему задание на работу,
//в любое нужное время. И он их должен выполнять. Применяйте функциональные интерфейсы.


import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

public class Task {
    public static void main(String[] args) {

//-----------------------------------------------------------------------------------------------
//  Для начала, нашему чернорабочему нужно поднять 20 мешков цемента на второй этаж.


        Consumer<Integer> consumer = (num) -> System.out.println("На второй этаж доставлено - "+ num + " мешков цемента.");
        consumer.accept(20);

//  А песка только половину от общего количества.

        consumer = (num) -> System.out.println("На второй этаж доставлено - "+ num / 2 + " мешков песка.");
        consumer.accept(20);

//  Следующим заданием на сегодня нашему чернорабочему нужно прорыть траншею вдоль 3-метрового забора, периодически проверяя, докопал он или нет.

        Predicate<Double> predicate = (num) -> !(num > 3.0);
        System.out.println("Еще копать?: " + predicate.test(1.5));
        System.out.println("Еще копать?: " + predicate.test(3.05));

//  Вскоре вводные данные поменялись и понадобилась траншея больше нашего забора, но меньше 5-метровой стены.
//  Проверять докопал или нет по-прежнему надо, поскольку с глазомером у рабочего так себе...

        predicate = (num) -> !(num > 3.0) && (num < 5.0);
        System.out.println("Еще копать?: " + predicate.test(3.25));
        System.out.println("Еще копать?: " + predicate.test(5.25));

//  Теперь нашему чернорабочему дали задание поделить весь цемент между двумя бригадами строителей.

        Function<Integer, Double> function = (num) -> (double) num / 2;

        System.out.println("Каждая бригада получит: " + function.apply(8) + " мешков цемента.");
        System.out.println("Каждая бригада получит: " + function.apply(11) + " мешков цемента.");

//  Тут подъехала резервная бригада и потребовала свою долю цемента.

        function = (num) -> (double) num / 3;
        System.out.println("С учетом резервной бригады, каждая бригада получит: " + function.apply(11) + " мешков цемента.");

//  Утомился наш чернорабочий и решил взять отгул, только никак не мог решить в какой день,
//  пришлось бросать жребий.

        Supplier<Integer> supplier = () -> (int) ((Math.random() * 5));
        System.out.println("Отгул беру в " + supplier.get() + "-й день недели.");

    }
}